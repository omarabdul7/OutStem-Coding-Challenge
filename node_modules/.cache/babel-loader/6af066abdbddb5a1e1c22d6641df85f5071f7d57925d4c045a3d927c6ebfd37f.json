{"ast":null,"code":"var _jsxFileName = \"/Users/omarabdul/Desktop/uOttawa/a-slice-of-pi-dashboard/src/components/MonthlyRevenueChart.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\nimport { fetchOrders } from '../services/orderService';\nimport { fetchPricing } from '../services/pricingService';\n\n// Registering necessary components for Chart.js to work with line charts\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\n\n// Defining the props for the MonthlyRevenueChart component\n\n// Functional component for displaying the monthly revenue chart\nconst MonthlyRevenueChart = ({\n  startDate,\n  endDate\n}) => {\n  _s();\n  // State for storing monthly revenue data\n  const [monthlyRevenue, setMonthlyRevenue] = useState(new Array(12).fill(0));\n\n  // useEffect hook to update the chart when startDate or endDate changes\n  useEffect(() => {\n    // Async function to calculate monthly revenue\n    const calculateMonthlyRevenue = async () => {\n      const orders = await fetchOrders(); // Fetching order data\n      const pricing = await fetchPricing(); // Fetching pricing data\n\n      // Initializing an array to store monthly totals\n      const monthlyTotals = new Array(12).fill(0);\n\n      // Looping through each order\n      orders.forEach(order => {\n        const orderDate = new Date(order.date); // Converting order date string to Date object\n        // Checking if the order date is within the selected range\n        if (orderDate >= new Date(startDate) && orderDate <= new Date(endDate)) {\n          const month = orderDate.getMonth(); // Getting the month of the order\n          // Calculating the total cost of the order\n          const orderTotal = order.items.reduce((acc, item) => {\n            const price = pricing[item.type][item.size]; // Getting the price for each item\n            return acc + price; // Accumulating the total cost\n          }, 0);\n          monthlyTotals[month] += orderTotal; // Adding the order total to the corresponding month\n        }\n      });\n      setMonthlyRevenue(monthlyTotals); // Updating the state with the calculated monthly totals\n    };\n    calculateMonthlyRevenue(); // Calling the function to calculate monthly revenue\n  }, [startDate, endDate]); // Dependencies for useEffect, the hook will re-run when these values change\n\n  // Data structure for the line chart\n  const data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    datasets: [{\n      label: 'Monthly Revenue in 2023 ($)',\n      data: monthlyRevenue,\n      // Using the monthly revenue data for the chart\n      fill: false,\n      backgroundColor: 'rgb(75, 192, 192)',\n      // Background color for the dataset\n      borderColor: 'rgba(75, 192, 192, 0.2)' // Border color for the dataset\n    }]\n  };\n\n  // Returning the Line component from react-chartjs-2 with the data\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 10\n  }, this);\n};\n_s(MonthlyRevenueChart, \"BwMEadks+1UPUKN7KvIrqq391r0=\");\n_c = MonthlyRevenueChart;\nexport default MonthlyRevenueChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyRevenueChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Legend","fetchOrders","fetchPricing","jsxDEV","_jsxDEV","register","MonthlyRevenueChart","startDate","endDate","_s","monthlyRevenue","setMonthlyRevenue","Array","fill","calculateMonthlyRevenue","orders","pricing","monthlyTotals","forEach","order","orderDate","Date","date","month","getMonth","orderTotal","items","reduce","acc","item","price","type","size","data","labels","datasets","label","backgroundColor","borderColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/omarabdul/Desktop/uOttawa/a-slice-of-pi-dashboard/src/components/MonthlyRevenueChart.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\nimport { fetchOrders } from '../services/orderService';\nimport { fetchPricing } from '../services/pricingService';\n\n// Registering necessary components for Chart.js to work with line charts\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\n\n// Defining the props for the MonthlyRevenueChart component\ninterface MonthlyRevenueChartProps {\n  startDate: string;\n  endDate: string;\n}\n\n// Functional component for displaying the monthly revenue chart\nconst MonthlyRevenueChart: React.FC<MonthlyRevenueChartProps> = ({ startDate, endDate }) => {\n  // State for storing monthly revenue data\n  const [monthlyRevenue, setMonthlyRevenue] = useState<number[]>(new Array(12).fill(0));\n\n  // useEffect hook to update the chart when startDate or endDate changes\n  useEffect(() => {\n    // Async function to calculate monthly revenue\n    const calculateMonthlyRevenue = async () => {\n      const orders = await fetchOrders(); // Fetching order data\n      const pricing = await fetchPricing(); // Fetching pricing data\n\n      // Initializing an array to store monthly totals\n      const monthlyTotals = new Array(12).fill(0);\n\n      // Looping through each order\n      orders.forEach(order => {\n        const orderDate = new Date(order.date); // Converting order date string to Date object\n        // Checking if the order date is within the selected range\n        if (orderDate >= new Date(startDate) && orderDate <= new Date(endDate)) {\n          const month = orderDate.getMonth(); // Getting the month of the order\n          // Calculating the total cost of the order\n          const orderTotal = order.items.reduce((acc, item) => {\n            const price = pricing[item.type][item.size]; // Getting the price for each item\n            return acc + price; // Accumulating the total cost\n          }, 0);\n\n          monthlyTotals[month] += orderTotal; // Adding the order total to the corresponding month\n        }\n      });\n\n      setMonthlyRevenue(monthlyTotals); // Updating the state with the calculated monthly totals\n    };\n\n    calculateMonthlyRevenue(); // Calling the function to calculate monthly revenue\n  }, [startDate, endDate]); // Dependencies for useEffect, the hook will re-run when these values change\n\n  // Data structure for the line chart\n  const data = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    datasets: [\n      {\n        label: 'Monthly Revenue in 2023 ($)',\n        data: monthlyRevenue, // Using the monthly revenue data for the chart\n        fill: false,\n        backgroundColor: 'rgb(75, 192, 192)', // Background color for the dataset\n        borderColor: 'rgba(75, 192, 192, 0.2)', // Border color for the dataset\n      }\n    ],\n  };\n\n  // Returning the Line component from react-chartjs-2 with the data\n  return <Line data={data} />;\n};\n\nexport default MonthlyRevenueChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}