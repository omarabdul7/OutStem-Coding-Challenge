{"ast":null,"code":"var _jsxFileName = \"/Users/omarabdul/Desktop/uOttawa/a-slice-of-pi-dashboard/src/components/MonthlyRevenueChart.tsx\",\n  _s = $RefreshSig$();\n// src/components/MonthlyRevenueChart.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\nimport { fetchOrders } from '../services/orderService';\nimport { fetchPricing } from '../services/pricingService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\nconst MonthlyRevenueChart = ({\n  startDate,\n  endDate\n}) => {\n  _s();\n  const [monthlyRevenue, setMonthlyRevenue] = useState([]);\n  useEffect(() => {\n    const calculateMonthlyRevenue = async () => {\n      const orders = await fetchOrders();\n      const pricing = await fetchPricing();\n      const monthlyTotals = new Array(12).fill(0);\n      orders.forEach(order => {\n        const orderDate = new Date(order.date);\n        if (orderDate >= new Date(startDate) && orderDate <= new Date(endDate)) {\n          const month = orderDate.getMonth(); // 0-11\n          const orderTotal = order.items.reduce((acc, item) => {\n            const price = pricing[item.type][item.size];\n            return acc + price;\n          }, 0);\n          monthlyTotals[month] += orderTotal;\n        }\n      });\n\n      // Adjust this part to fit the new logic\n      const endMonth = Math.min(new Date(endDate).getMonth(), new Date().getMonth());\n      const adjustedMonthlyRevenue = monthlyTotals.slice(0, endMonth + 1);\n      setMonthlyRevenue(adjustedMonthlyRevenue);\n    };\n    calculateMonthlyRevenue();\n  }, [startDate, endDate]);\n  const generateMonthLabels = () => {\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const startMonth = new Date(startDate).getMonth();\n    const endMonth = Math.min(new Date(endDate).getMonth(), new Date().getMonth());\n    return monthNames.slice(startMonth, endMonth + 1);\n  };\n  const data = {\n    labels: generateMonthLabels(),\n    datasets: [{\n      label: 'Monthly Revenue in 2023 ($)',\n      data: monthlyRevenue,\n      fill: false,\n      backgroundColor: 'rgb(75, 192, 192)',\n      borderColor: 'rgba(75, 192, 192, 0.2)'\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(Line, {\n    data: data\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 10\n  }, this);\n};\n_s(MonthlyRevenueChart, \"V+vpm6pEke/H5dqdApeJXQJrtmc=\");\n_c = MonthlyRevenueChart;\nexport default MonthlyRevenueChart;\nvar _c;\n$RefreshReg$(_c, \"MonthlyRevenueChart\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Legend","fetchOrders","fetchPricing","jsxDEV","_jsxDEV","register","MonthlyRevenueChart","startDate","endDate","_s","monthlyRevenue","setMonthlyRevenue","calculateMonthlyRevenue","orders","pricing","monthlyTotals","Array","fill","forEach","order","orderDate","Date","date","month","getMonth","orderTotal","items","reduce","acc","item","price","type","size","endMonth","Math","min","adjustedMonthlyRevenue","slice","generateMonthLabels","monthNames","startMonth","data","labels","datasets","label","backgroundColor","borderColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/omarabdul/Desktop/uOttawa/a-slice-of-pi-dashboard/src/components/MonthlyRevenueChart.tsx"],"sourcesContent":["// src/components/MonthlyRevenueChart.tsx\n\nimport React, { useState, useEffect } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend } from 'chart.js';\nimport { Order, Pricing } from '../types';\nimport { fetchOrders } from '../services/orderService';\nimport { fetchPricing } from '../services/pricingService';\n\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Tooltip, Legend);\n\ninterface MonthlyRevenueChartProps {\n  startDate: string;\n  endDate: string;\n}\n\nconst MonthlyRevenueChart: React.FC<MonthlyRevenueChartProps> = ({ startDate, endDate }) => {\n  const [monthlyRevenue, setMonthlyRevenue] = useState<number[]>([]);\n\n  useEffect(() => {\n    const calculateMonthlyRevenue = async () => {\n      const orders = await fetchOrders();\n      const pricing = await fetchPricing();\n\n      const monthlyTotals = new Array(12).fill(0);\n\n      orders.forEach(order => {\n        const orderDate = new Date(order.date);\n        if (orderDate >= new Date(startDate) && orderDate <= new Date(endDate)) {\n          const month = orderDate.getMonth(); // 0-11\n          const orderTotal = order.items.reduce((acc, item) => {\n            const price = pricing[item.type][item.size];\n            return acc + price;\n          }, 0);\n\n          monthlyTotals[month] += orderTotal;\n        }\n      });\n\n      // Adjust this part to fit the new logic\n      const endMonth = Math.min(\n        new Date(endDate).getMonth(),\n        new Date().getMonth()\n      );\n      const adjustedMonthlyRevenue = monthlyTotals.slice(0, endMonth + 1);\n      setMonthlyRevenue(adjustedMonthlyRevenue);\n    };\n\n    calculateMonthlyRevenue();\n  }, [startDate, endDate]);\n\n  const generateMonthLabels = () => {\n    const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    const startMonth = new Date(startDate).getMonth();\n    const endMonth = Math.min(new Date(endDate).getMonth(), new Date().getMonth());\n\n    return monthNames.slice(startMonth, endMonth + 1);\n  };\n\n  const data = {\n    labels: generateMonthLabels(),\n    datasets: [\n      {\n        label: 'Monthly Revenue in 2023 ($)',\n        data: monthlyRevenue,\n        fill: false,\n        backgroundColor: 'rgb(75, 192, 192)',\n        borderColor: 'rgba(75, 192, 192, 0.2)',\n      }\n    ],\n  };\n\n  return <Line data={data} />;\n};\n\nexport default MonthlyRevenueChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}