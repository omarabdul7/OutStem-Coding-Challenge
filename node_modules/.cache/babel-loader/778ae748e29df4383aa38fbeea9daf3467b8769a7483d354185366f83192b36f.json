{"ast":null,"code":"var _jsxFileName = \"/Users/omarabdul/Desktop/uOttawa/a-slice-of-pi-dashboard/src/components/TotalRevenue.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { fetchOrders } from '../services/orderService';\nimport { fetchPricing } from '../services/pricingService';\n\n// Functional component to display total revenue\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TotalRevenue = () => {\n  _s();\n  // State for storing the total revenue value\n  const [totalRevenue, setTotalRevenue] = useState(0);\n\n  // useEffect hook to calculate total revenue on component mount\n  useEffect(() => {\n    // Asynchronous function to fetch data and calculate revenue\n    const calculateTotalRevenue = async () => {\n      const orders = await fetchOrders(); // Fetches order data\n      const pricing = await fetchPricing(); // Fetches pricing data\n\n      // Calculates total revenue from all orders\n      const total = orders.reduce((acc, order) => {\n        // Calculates total for each order\n        const orderTotal = order.items.reduce((orderAcc, item) => {\n          const price = pricing[item.type][item.size]; // Gets price for each item\n          return orderAcc + price; // Accumulates item prices\n        }, 0);\n        return acc + orderTotal; // Accumulates order totals\n      }, 0);\n      setTotalRevenue(total); // Sets the calculated total revenue in state\n    };\n    calculateTotalRevenue();\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  // Renders the total revenue\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"$\", totalRevenue.toFixed(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(TotalRevenue, \"l9HCFwP1ZW2v8KH5LzpzZeu6zro=\");\n_c = TotalRevenue;\nexport default TotalRevenue;\nvar _c;\n$RefreshReg$(_c, \"TotalRevenue\");","map":{"version":3,"names":["React","useState","useEffect","fetchOrders","fetchPricing","jsxDEV","_jsxDEV","TotalRevenue","_s","totalRevenue","setTotalRevenue","calculateTotalRevenue","orders","pricing","total","reduce","acc","order","orderTotal","items","orderAcc","item","price","type","size","children","toFixed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/omarabdul/Desktop/uOttawa/a-slice-of-pi-dashboard/src/components/TotalRevenue.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { fetchOrders } from '../services/orderService';\nimport { fetchPricing } from '../services/pricingService';\n\n// Functional component to display total revenue\nconst TotalRevenue = () => {\n  // State for storing the total revenue value\n  const [totalRevenue, setTotalRevenue] = useState<number>(0);\n\n  // useEffect hook to calculate total revenue on component mount\n  useEffect(() => {\n    // Asynchronous function to fetch data and calculate revenue\n    const calculateTotalRevenue = async () => {\n      const orders = await fetchOrders(); // Fetches order data\n      const pricing = await fetchPricing(); // Fetches pricing data\n      \n      // Calculates total revenue from all orders\n      const total = orders.reduce((acc, order) => {\n        // Calculates total for each order\n        const orderTotal = order.items.reduce((orderAcc, item) => {\n          const price = pricing[item.type][item.size]; // Gets price for each item\n          return orderAcc + price; // Accumulates item prices\n        }, 0);\n        return acc + orderTotal; // Accumulates order totals\n      }, 0);\n\n      setTotalRevenue(total); // Sets the calculated total revenue in state\n    };\n\n    calculateTotalRevenue();\n  }, []); // Empty dependency array means this effect runs once on mount\n\n  // Renders the total revenue\n  return (\n    <div>\n      <p>${totalRevenue.toFixed(2)}</p> {/* Displays the total revenue formatted as currency */}\n    </div>\n  );\n};\n\nexport default TotalRevenue;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,0BAA0B;AACtD,SAASC,YAAY,QAAQ,4BAA4B;;AAEzD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAS,CAAC,CAAC;;EAE3D;EACAC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,qBAAqB,GAAG,MAAAA,CAAA,KAAY;MACxC,MAAMC,MAAM,GAAG,MAAMT,WAAW,CAAC,CAAC,CAAC,CAAC;MACpC,MAAMU,OAAO,GAAG,MAAMT,YAAY,CAAC,CAAC,CAAC,CAAC;;MAEtC;MACA,MAAMU,KAAK,GAAGF,MAAM,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAK;QAC1C;QACA,MAAMC,UAAU,GAAGD,KAAK,CAACE,KAAK,CAACJ,MAAM,CAAC,CAACK,QAAQ,EAAEC,IAAI,KAAK;UACxD,MAAMC,KAAK,GAAGT,OAAO,CAACQ,IAAI,CAACE,IAAI,CAAC,CAACF,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC;UAC7C,OAAOJ,QAAQ,GAAGE,KAAK,CAAC,CAAC;QAC3B,CAAC,EAAE,CAAC,CAAC;QACL,OAAON,GAAG,GAAGE,UAAU,CAAC,CAAC;MAC3B,CAAC,EAAE,CAAC,CAAC;MAELR,eAAe,CAACI,KAAK,CAAC,CAAC,CAAC;IAC1B,CAAC;IAEDH,qBAAqB,CAAC,CAAC;EACzB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACA,oBACEL,OAAA;IAAAmB,QAAA,gBACEnB,OAAA;MAAAmB,QAAA,GAAG,GAAC,EAAChB,YAAY,CAACiB,OAAO,CAAC,CAAC,CAAC;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,KAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEV,CAAC;AAACtB,EAAA,CAjCID,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AAmClB,eAAeA,YAAY;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}